# -*- mode: ruby -*-
# vi: set ft=ruby :

$server_config = <<-SCRIPT

echo "\n\n================================================================"
    echo  "\033[0;32m\t ********* Docker Installation ********* 033[0m"
echo "================================================================\n\n"

    sudo apt-get remove docker docker-engine docker.io containerd runc
    sudo apt-get update

    sudo apt-get install ca-certificates curl gnupg lsb-release

    sudo mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update -y
    sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y
    sudo usermod -aG docker ${USER}

echo "\033[0;32m\n\n================================================================\033[0m"
    echo  "\033[0;32m\t  ********* Kubectl Configuration  ********* \033[0m"
echo "\033[0;32m================================================================\n\n"

    curl  -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl" >/dev/null 
    chmod +x ./kubectl
    sudo mv ./kubectl /usr/local/bin/kubectl

echo "\033[0;32m\n\n================================================================\033[0m"
    echo  "\033[0;32m\t  ********* k3d install ********* \033[0m"
echo "\033[0;32m================================================================\n\n\033[0m"

curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

echo "\033[0;32m\n\n================================================================"
    echo -e "\033[0;32m\t  ********* Create a new k3s cluster (k3s-in-docker)  ********* \033[0m"
echo "\033[0;32m================================================================\n\n\033[0m"

    sudo k3d cluster create aybourasCluster --api-port 192.168.42.112:6443 -p "80:80@loadbalancer"  --k3s-arg "--no-deploy=traefik@server:*" --wait

echo "\033[0;32m\n\n================================================================\033[0m"
    echo -e "\033[0;32m\t  ********* Installing argocd  ********* \033[0m"
echo "\033[0;32m================================================================\n\n\033[0m"

sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-amd64 
sudo chmod +x /usr/local/bin/argocd

echo "\033[0;32m\n\n================================================================\033[0m"
    echo -e "\033[0;32m\t  ********* Create namespaces ********* \033[0m"
echo "\033[0;32m================================================================\n\n\033[0m"

    sudo kubectl create namespace argocd
    sudo kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --wait

    sudo kubectl create namespace dev

echo "\033[0;32m\n\n================================================================\033[0m"
    echo -e "\033[0;32m\t  ********* Loadbalancer patch  ********* \033[0m"
echo "\033[0;32m================================================================\n\n\033[0m"

    sudo kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'
    #sudo kubectl get svc -A
    #sudo kubectl get svc -A --wait
    #sudo kubectl get pod --namespace argocd -w

echo "\033[0;32m\n\n================================================================\033[0m"
    echo -e "\033[0;32m\t  ********* Deploying the application  ********* \033[0m"
echo "\033[0;32m================================================================\n\n\033[0m"

    sudo kubectl  apply -f /vagrant/cluster_synced_repo/playground/application.yaml
    sudo kubectl  apply -f /vagrant/cluster_synced_repo/playground/dev/deployment.yaml --namespace dev
    sudo kubectl  apply -f /vagrant/cluster_synced_repo/playground/dev/service.yaml --namespace dev
# sudo kubectl  apply -f /vagrant/cluster_synced_repo/playground/dev/ingress.yaml --namespace dev

    echo -e "\033[0;32m\t  ********* agroCD pwd is:  ********* \033[0m"

    while (true)
        do
            output=$(sudo kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}") > /dev/null 2>&1
            len=${#output}
            
            if [ $len -eq 24 ]; then 
                echo "\n\n\nagroCD password is: \n\n"
                sudo kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo
                break
            fi

            echo "\033[0;31m waiting for argoCD to get ready .....\033[0m"
            sleep 6

        done

    echo "\nvisit the link: \n https://192.168.42.112:80"
    # open -a "Google Chrome" https://192.168.42.112:80
    # open -a "Firefox" https://192.168.42.112:80

SCRIPT

VAGRANTFILE_API_VERSION = "2"

Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
    config.vm.box = "generic/ubuntu1804"
    config.vm.synced_folder ".", "/vagrant"

    config.vm.define "argocd" do |server|
        server.vm.hostname = "argocd"
        server.vm.network "private_network", ip: "192.168.42.112"
        server.vm.provider :virtualbox do |v|
            v.name = "argocd"
            v.memory = 2000
            v.cpus = 2
        end
        
        # privileged (boolean) - Specifies whether to execute the shell script as
        #  a privileged user or not (sudo). By default this is "true".
        server.vm.provision "shell", inline: $server_config , privileged: false
    end
    
end