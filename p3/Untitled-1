
echo "\n\n================================================================"
echo -e "\033[0;32m  ********* Create a new k3s cluster (k3s in docker)  ********* \033[0m"
echo "================================================================\n\n"

k3d cluster create cluster1 --api-port ip_addres:6443 -p "80:80@loadbalancer"  --wait
k3d cluster create cluster2  -p 8080:80@server:0 -p 8888:8888@server:0 -p 8181:8181@server:0 --wait
k3d cluster create cluster3 --api-port 6550 -p "8081:80@loadbalancer" --agents 2 --wait
k3d cluster create cluster4 -p 80:80@loadbalancer --wait
k3d cluster create cluster5 --api-port 6443 --servers 1 --agents -p "30500-31000:30500-31000@server:0" --wait

fifth way using a yaml file:
https://tealfeed.com/kubernetes-development-clusters-k3d-ctn9y

# echo -e "\033[0;32m \n ********* namespaces creation  *********\n \033[0m"

# sudo kubectl create namespace argocd
# sudo kubectl create namespace dev

# echo -e "\033[0;32m \n ********* kubectl apply -n argocd *********\n \033[0m"

# kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

# # kubectl get pod -n argocd -w




$server_config = <<-SCRIPT

echo "\n\n================================================================"
echo  "\033[0;32m ********* Docker Installation ********* 033[0m"
echo "================================================================\n\n"

sudo apt-get remove docker docker-engine docker.io containerd runc
sudo apt-get update

 sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release

sudo mkdir -p /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
  $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

  sudo apt-get update -y

  sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin -y


sudo usermod -aG docker ${USER}

echo "\n\n================================================================"
echo  "\033[0;32m  ********* kubectl configuration  ********* \033[0m"
echo "================================================================\n\n"

curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x ./kubectl
sudo mv ./kubectl /usr/local/bin/kubectl

echo "\n\n================================================================"
echo  "\033[0;32m  ********* k3d install ********* \033[0m"
echo "================================================================\n\n"

 curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

 echo "\n\n================================================================"
echo -e "\033[0;32m  ********* Create a new k3s cluster (k3s in docker)  ********* \033[0m"
echo "================================================================\n\n"

sudo k3d cluster create cluster1 --api-port 192.168.42.112:6443 -p "80:80@loadbalancer"  --k3s-arg "--no-deploy=traefik@server:*" --wait
echo "\n\n================================================================"
echo -e "\033[0;32m  ********* Install argocd  ********* \033[0m"
echo "================================================================\n\n"

#sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/download/$VERSION/argocd-darwin-amd64 
#sudo chmod +x /usr/local/bin/argocd
echo "\n\n================================================================"
echo -e "\033[0;32m  ********* Create namespaces ********* \033[0m"
echo "================================================================\n\n"
sudo kubectl create namespace argocd 
sudo kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml --wait
echo "\n\n================================================================"
echo -e "\033[0;32m  ********* Loadbalancer patch  ********* \033[0m"
echo "================================================================\n\n"
sudo kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}' 
#sudo kubectl get svc -A
#sudo kubectl get svc -A -w
sudo kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d; echo >> /argocd_pwd.txt
echo "\n\n================================================================"
echo -e "\033[0;32m  ********* Deploying application  ********* \033[0m"
echo "================================================================\n\n"
sudo kubectl  apply -f /vagrant/argo_conf/application.yaml 
sudo kubectl  apply -f /vagrant/argo_conf/dev/deployment.yaml 
sudo kubectl  apply -f /vagrant/argo_conf/dev/service.yaml 
SCRIPT
